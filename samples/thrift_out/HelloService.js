//
// Autogenerated by Thrift Compiler (0.15.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

HelloService_sayHello_args = function(args) {
  this.username = null;
  if (args) {
    if (args.username !== undefined && args.username !== null) {
      this.username = args.username;
    }
  }
};
HelloService_sayHello_args.prototype = {};
HelloService_sayHello_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.username = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HelloService_sayHello_args.prototype.write = function(output) {
  output.writeStructBegin('HelloService_sayHello_args');
  if (this.username !== null && this.username !== undefined) {
    output.writeFieldBegin('username', Thrift.Type.STRING, 1);
    output.writeString(this.username);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HelloService_sayHello_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
HelloService_sayHello_result.prototype = {};
HelloService_sayHello_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HelloService_sayHello_result.prototype.write = function(output) {
  output.writeStructBegin('HelloService_sayHello_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HelloService_sayHelloRequest_args = function(args) {
  this.req = null;
  this.req1 = null;
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new Request(args.req);
    }
    if (args.req1 !== undefined && args.req1 !== null) {
      this.req1 = new Request2(args.req1);
    }
  }
};
HelloService_sayHelloRequest_args.prototype = {};
HelloService_sayHelloRequest_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new Request();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req1 = new Request2();
        this.req1.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HelloService_sayHelloRequest_args.prototype.write = function(output) {
  output.writeStructBegin('HelloService_sayHelloRequest_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  if (this.req1 !== null && this.req1 !== undefined) {
    output.writeFieldBegin('req1', Thrift.Type.STRUCT, 2);
    this.req1.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HelloService_sayHelloRequest_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new Response(args.success);
    }
  }
};
HelloService_sayHelloRequest_result.prototype = {};
HelloService_sayHelloRequest_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new Response();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HelloService_sayHelloRequest_result.prototype.write = function(output) {
  output.writeStructBegin('HelloService_sayHelloRequest_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HelloServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
HelloServiceClient.prototype = {};

HelloServiceClient.prototype.sayHello = function(username, callback) {
  if (callback === undefined) {
    this.send_sayHello(username);
    return this.recv_sayHello();
  } else {
    var postData = this.send_sayHello(username, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_sayHello);
  }
};

HelloServiceClient.prototype.send_sayHello = function(username, callback) {
  var params = {
    username: username
  };
  var args = new HelloService_sayHello_args(params);
  try {
    this.output.writeMessageBegin('sayHello', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    return this.output.getTransport().flush(callback);
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

HelloServiceClient.prototype.recv_sayHello = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new HelloService_sayHello_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'sayHello failed: unknown result';
};

HelloServiceClient.prototype.sayHelloRequest = function(req, req1, callback) {
  if (callback === undefined) {
    this.send_sayHelloRequest(req, req1);
    return this.recv_sayHelloRequest();
  } else {
    var postData = this.send_sayHelloRequest(req, req1, true);
    return this.output.getTransport()
      .jqRequest(this, postData, arguments, this.recv_sayHelloRequest);
  }
};

HelloServiceClient.prototype.send_sayHelloRequest = function(req, req1, callback) {
  var params = {
    req: req,
    req1: req1
  };
  var args = new HelloService_sayHelloRequest_args(params);
  try {
    this.output.writeMessageBegin('sayHelloRequest', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    return this.output.getTransport().flush(callback);
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

HelloServiceClient.prototype.recv_sayHelloRequest = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new HelloService_sayHelloRequest_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'sayHelloRequest failed: unknown result';
};
