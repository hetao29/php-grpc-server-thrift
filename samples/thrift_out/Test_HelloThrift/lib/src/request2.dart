/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library Test_HelloThrift.src.request2;

import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:Test_HelloThrift/Test_HelloThrift.dart';

class Request2 implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("Request2");
  static final TField _NUMBER_FIELD_DESC = new TField("number", TType.I32, 1);
  static final TField _BIG_NUMBER_FIELD_DESC = new TField("bigNumber", TType.I64, 2);
  static final TField _DECIMALS_FIELD_DESC = new TField("decimals", TType.DOUBLE, 3);
  static final TField _NAME_FIELD_DESC = new TField("name", TType.STRING, 4);

  int _number = 0;
  static const int NUMBER = 1;
  int _bigNumber = 0;
  static const int BIGNUMBER = 2;
  double _decimals = 0.0;
  static const int DECIMALS = 3;
  String _name;
  static const int NAME = 4;

  bool __isset_number = false;
  bool __isset_bigNumber = false;
  bool __isset_decimals = false;

  Request2() {
    this.number = 10;

    this.name = 'thrifty';

  }

  // number
  int get number => this._number;

  set number(int number) {
    this._number = number;
    this.__isset_number = true;
  }

  bool isSetNumber() => this.__isset_number;

  unsetNumber() {
    this.__isset_number = false;
  }

  // bigNumber
  int get bigNumber => this._bigNumber;

  set bigNumber(int bigNumber) {
    this._bigNumber = bigNumber;
    this.__isset_bigNumber = true;
  }

  bool isSetBigNumber() => this.__isset_bigNumber;

  unsetBigNumber() {
    this.__isset_bigNumber = false;
  }

  // decimals
  double get decimals => this._decimals;

  set decimals(double decimals) {
    this._decimals = decimals;
    this.__isset_decimals = true;
  }

  bool isSetDecimals() => this.__isset_decimals;

  unsetDecimals() {
    this.__isset_decimals = false;
  }

  // name
  String get name => this._name;

  set name(String name) {
    this._name = name;
  }

  bool isSetName() => this.name != null;

  unsetName() {
    this.name = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case NUMBER:
        return this.number;
      case BIGNUMBER:
        return this.bigNumber;
      case DECIMALS:
        return this.decimals;
      case NAME:
        return this.name;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case NUMBER:
        if (value == null) {
          unsetNumber();
        } else {
          this.number = value;
        }
        break;

      case BIGNUMBER:
        if (value == null) {
          unsetBigNumber();
        } else {
          this.bigNumber = value;
        }
        break;

      case DECIMALS:
        if (value == null) {
          unsetDecimals();
        } else {
          this.decimals = value;
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          this.name = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case NUMBER:
        return isSetNumber();
      case BIGNUMBER:
        return isSetBigNumber();
      case DECIMALS:
        return isSetDecimals();
      case NAME:
        return isSetName();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case NUMBER:
          if (field.type == TType.I32) {
            this.number = iprot.readI32();
            this.__isset_number = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BIGNUMBER:
          if (field.type == TType.I64) {
            this.bigNumber = iprot.readI64();
            this.__isset_bigNumber = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DECIMALS:
          if (field.type == TType.DOUBLE) {
            this.decimals = iprot.readDouble();
            this.__isset_decimals = true;
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NAME:
          if (field.type == TType.STRING) {
            this.name = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    oprot.writeFieldBegin(_NUMBER_FIELD_DESC);
    oprot.writeI32(this.number);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_BIG_NUMBER_FIELD_DESC);
    oprot.writeI64(this.bigNumber);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(_DECIMALS_FIELD_DESC);
    oprot.writeDouble(this.decimals);
    oprot.writeFieldEnd();
    if (this.name != null) {
      oprot.writeFieldBegin(_NAME_FIELD_DESC);
      oprot.writeString(this.name);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("Request2(");

    ret.write("number:");
    ret.write(this.number);

    ret.write(", ");
    ret.write("bigNumber:");
    ret.write(this.bigNumber);

    ret.write(", ");
    ret.write("decimals:");
    ret.write(this.decimals);

    ret.write(", ");
    ret.write("name:");
    if (this.name == null) {
      ret.write("null");
    } else {
      ret.write(this.name);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

