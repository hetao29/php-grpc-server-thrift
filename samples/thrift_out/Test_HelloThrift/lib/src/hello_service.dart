/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
library Test_HelloThrift.src.hello_service;

import 'dart:async';
import 'dart:typed_data' show Uint8List;
import 'package:thrift/thrift.dart';
import 'package:Test_HelloThrift/Test_HelloThrift.dart';


abstract class HelloService {

  Future<String> sayHello(String username);

  Future<Response> sayHelloRequest(Request req, Request2 req1);
}

class HelloServiceClient implements HelloService {

  HelloServiceClient(TProtocol iprot, [TProtocol oprot = null]) {
    _iprot = iprot;
    _oprot = (oprot == null) ? iprot : oprot;
  }

  TProtocol _iprot;

  TProtocol get iprot => _iprot;

  TProtocol _oprot;

  TProtocol get oprot => _oprot;

  int _seqid = 0;

  int get seqid => _seqid;

  int nextSeqid() => ++_seqid;

  Future<String> sayHello(String username) async {
    oprot.writeMessageBegin(new TMessage("sayHello", TMessageType.CALL, nextSeqid()));
    sayHello_args args = new sayHello_args();
    args.username = username;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sayHello_result result = new sayHello_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "sayHello failed: unknown result");
  }

  Future<Response> sayHelloRequest(Request req, Request2 req1) async {
    oprot.writeMessageBegin(new TMessage("sayHelloRequest", TMessageType.CALL, nextSeqid()));
    sayHelloRequest_args args = new sayHelloRequest_args();
    args.req = req;
    args.req1 = req1;
    args.write(oprot);
    oprot.writeMessageEnd();

    await oprot.transport.flush();

    TMessage msg = iprot.readMessageBegin();
    if (msg.type == TMessageType.EXCEPTION) {
      TApplicationError error = TApplicationError.read(iprot);
      iprot.readMessageEnd();
      throw error;
    }

    sayHelloRequest_result result = new sayHelloRequest_result();
    result.read(iprot);
    iprot.readMessageEnd();
    if (result.isSetSuccess()) {
      return result.success;
    }

    throw new TApplicationError(TApplicationErrorType.MISSING_RESULT, "sayHelloRequest failed: unknown result");
  }

}

typedef void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);

class HelloServiceProcessor implements TProcessor {
  HelloServiceProcessor(HelloService iface) {
    iface_ = iface;
    PROCESS_MAP["sayHello"] = sayHello;
    PROCESS_MAP["sayHelloRequest"] = sayHelloRequest;
  }

  HelloService iface_;
  final Map<String, ProcessFunction> PROCESS_MAP = {};

  bool process(TProtocol iprot, TProtocol oprot) {
    TMessage msg = iprot.readMessageBegin();
    ProcessFunction fn = PROCESS_MAP[msg.name];
    if (fn == null) {
      TProtocolUtil.skip(iprot, TType.STRUCT);
      iprot.readMessageEnd();
      TApplicationError x = new TApplicationError(TApplicationErrorType.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
      oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
      x.write(oprot);
      oprot.writeMessageEnd();
      oprot.transport.flush();
      return true;
    }
    fn(msg.seqid, iprot, oprot);
    return true;
  }

  sayHello(int seqid, TProtocol iprot, TProtocol oprot) async {
    sayHello_args args = new sayHello_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sayHello_result result = new sayHello_result();
    result.success = await iface_.sayHello(args.username);
    oprot.writeMessageBegin(new TMessage("sayHello", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

  sayHelloRequest(int seqid, TProtocol iprot, TProtocol oprot) async {
    sayHelloRequest_args args = new sayHelloRequest_args();
    args.read(iprot);
    iprot.readMessageEnd();
    sayHelloRequest_result result = new sayHelloRequest_result();
    result.success = await iface_.sayHelloRequest(args.req, args.req1);
    oprot.writeMessageBegin(new TMessage("sayHelloRequest", TMessageType.REPLY, seqid));
    result.write(oprot);
    oprot.writeMessageEnd();
    oprot.transport.flush();
  }

}

class sayHello_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sayHello_args");
  static final TField _USERNAME_FIELD_DESC = new TField("username", TType.STRING, 1);

  String _username;
  static const int USERNAME = 1;


  sayHello_args() {
  }

  // username
  String get username => this._username;

  set username(String username) {
    this._username = username;
  }

  bool isSetUsername() => this.username != null;

  unsetUsername() {
    this.username = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case USERNAME:
        return this.username;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case USERNAME:
        if (value == null) {
          unsetUsername();
        } else {
          this.username = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case USERNAME:
        return isSetUsername();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case USERNAME:
          if (field.type == TType.STRING) {
            this.username = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.username != null) {
      oprot.writeFieldBegin(_USERNAME_FIELD_DESC);
      oprot.writeString(this.username);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sayHello_args(");

    ret.write("username:");
    if (this.username == null) {
      ret.write("null");
    } else {
      ret.write(this.username);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sayHello_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sayHello_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRING, 0);

  String _success;
  static const int SUCCESS = 0;


  sayHello_result() {
  }

  // success
  String get success => this._success;

  set success(String success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRING) {
            this.success = iprot.readString();
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      oprot.writeString(this.success);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sayHello_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sayHelloRequest_args implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sayHelloRequest_args");
  static final TField _REQ_FIELD_DESC = new TField("req", TType.STRUCT, 1);
  static final TField _REQ1_FIELD_DESC = new TField("req1", TType.STRUCT, 2);

  Request _req;
  static const int REQ = 1;
  Request2 _req1;
  static const int REQ1 = 2;


  sayHelloRequest_args() {
  }

  // req
  Request get req => this._req;

  set req(Request req) {
    this._req = req;
  }

  bool isSetReq() => this.req != null;

  unsetReq() {
    this.req = null;
  }

  // req1
  Request2 get req1 => this._req1;

  set req1(Request2 req1) {
    this._req1 = req1;
  }

  bool isSetReq1() => this.req1 != null;

  unsetReq1() {
    this.req1 = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case REQ:
        return this.req;
      case REQ1:
        return this.req1;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          this.req = value;
        }
        break;

      case REQ1:
        if (value == null) {
          unsetReq1();
        } else {
          this.req1 = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case REQ:
        return isSetReq();
      case REQ1:
        return isSetReq1();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case REQ:
          if (field.type == TType.STRUCT) {
            this.req = new Request();
            this.req.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REQ1:
          if (field.type == TType.STRUCT) {
            this.req1 = new Request2();
            this.req1.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    validate();

    oprot.writeStructBegin(_STRUCT_DESC);
    if (this.req != null) {
      oprot.writeFieldBegin(_REQ_FIELD_DESC);
      this.req.write(oprot);
      oprot.writeFieldEnd();
    }
    if (this.req1 != null) {
      oprot.writeFieldBegin(_REQ1_FIELD_DESC);
      this.req1.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sayHelloRequest_args(");

    ret.write("req:");
    if (this.req == null) {
      ret.write("null");
    } else {
      ret.write(this.req);
    }

    ret.write(", ");
    ret.write("req1:");
    if (this.req1 == null) {
      ret.write("null");
    } else {
      ret.write(this.req1);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

class sayHelloRequest_result implements TBase {
  static final TStruct _STRUCT_DESC = new TStruct("sayHelloRequest_result");
  static final TField _SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, 0);

  Response _success;
  static const int SUCCESS = 0;


  sayHelloRequest_result() {
  }

  // success
  Response get success => this._success;

  set success(Response success) {
    this._success = success;
  }

  bool isSetSuccess() => this.success != null;

  unsetSuccess() {
    this.success = null;
  }

  getFieldValue(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return this.success;
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          this.success = value;
        }
        break;

      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
  bool isSet(int fieldID) {
    switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      default:
        throw new ArgumentError("Field $fieldID doesn't exist!");
    }
  }

  read(TProtocol iprot) {
    TField field;
    iprot.readStructBegin();
    while (true) {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) {
        break;
      }
      switch (field.id) {
        case SUCCESS:
          if (field.type == TType.STRUCT) {
            this.success = new Response();
            this.success.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  write(TProtocol oprot) {
    oprot.writeStructBegin(_STRUCT_DESC);

    if (this.isSetSuccess()) {
      oprot.writeFieldBegin(_SUCCESS_FIELD_DESC);
      this.success.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  String toString() {
    StringBuffer ret = new StringBuffer("sayHelloRequest_result(");

    ret.write("success:");
    if (this.success == null) {
      ret.write("null");
    } else {
      ret.write(this.success);
    }

    ret.write(")");

    return ret.toString();
  }

  validate() {
    // check for required fields
    // check that fields of type enum have valid values
  }

}

