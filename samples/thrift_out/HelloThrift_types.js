//
// Autogenerated by Thrift Compiler (0.15.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  var Int64 = require('node-int64');
}


Request = function(args) {
  this.number = 10;
  this.bigNumber = null;
  this.decimals = null;
  this.name = 'thrifty';
  if (args) {
    if (args.number !== undefined && args.number !== null) {
      this.number = args.number;
    }
    if (args.bigNumber !== undefined && args.bigNumber !== null) {
      this.bigNumber = args.bigNumber;
    }
    if (args.decimals !== undefined && args.decimals !== null) {
      this.decimals = args.decimals;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
Request.prototype = {};
Request.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.number = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.bigNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.decimals = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Request.prototype.write = function(output) {
  output.writeStructBegin('Request');
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.I32, 1);
    output.writeI32(this.number);
    output.writeFieldEnd();
  }
  if (this.bigNumber !== null && this.bigNumber !== undefined) {
    output.writeFieldBegin('bigNumber', Thrift.Type.I64, 2);
    output.writeI64(this.bigNumber);
    output.writeFieldEnd();
  }
  if (this.decimals !== null && this.decimals !== undefined) {
    output.writeFieldBegin('decimals', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.decimals);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Request2 = function(args) {
  this.number = 10;
  this.bigNumber = null;
  this.decimals = null;
  this.name = 'thrifty';
  if (args) {
    if (args.number !== undefined && args.number !== null) {
      this.number = args.number;
    }
    if (args.bigNumber !== undefined && args.bigNumber !== null) {
      this.bigNumber = args.bigNumber;
    }
    if (args.decimals !== undefined && args.decimals !== null) {
      this.decimals = args.decimals;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
Request2.prototype = {};
Request2.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.number = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.bigNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.decimals = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Request2.prototype.write = function(output) {
  output.writeStructBegin('Request2');
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.I32, 1);
    output.writeI32(this.number);
    output.writeFieldEnd();
  }
  if (this.bigNumber !== null && this.bigNumber !== undefined) {
    output.writeFieldBegin('bigNumber', Thrift.Type.I64, 2);
    output.writeI64(this.bigNumber);
    output.writeFieldEnd();
  }
  if (this.decimals !== null && this.decimals !== undefined) {
    output.writeFieldBegin('decimals', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.decimals);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Response = function(args) {
  this.number = 10;
  this.bigNumber = null;
  this.decimals = null;
  this.name = 'thrifty';
  if (args) {
    if (args.number !== undefined && args.number !== null) {
      this.number = args.number;
    }
    if (args.bigNumber !== undefined && args.bigNumber !== null) {
      this.bigNumber = args.bigNumber;
    }
    if (args.decimals !== undefined && args.decimals !== null) {
      this.decimals = args.decimals;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
Response.prototype = {};
Response.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.number = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.bigNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.decimals = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Response.prototype.write = function(output) {
  output.writeStructBegin('Response');
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.I32, 1);
    output.writeI32(this.number);
    output.writeFieldEnd();
  }
  if (this.bigNumber !== null && this.bigNumber !== undefined) {
    output.writeFieldBegin('bigNumber', Thrift.Type.I64, 2);
    output.writeI64(this.bigNumber);
    output.writeFieldEnd();
  }
  if (this.decimals !== null && this.decimals !== undefined) {
    output.writeFieldBegin('decimals', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.decimals);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 4);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

